name: Test

on:
  push:
    branches-ignore:
      - "dependabot/**"
      - "pre-commit-ci-update-config"
    paths-ignore:
      - "docs/**"
      - "tools/**"
      - ".circleci/**"
      - ".github/workflows/*"
      - "!.github/workflows/test.yml"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "tools/**"
      - ".circleci/**"
      - ".github/workflows/*"
      - "!.github/workflows/test.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  # only affects Windows, but easiest to set here for now
  SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
  # don't compile Cython if we are building from source
  NO_CYTHON_COMPILE: "true"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    continue-on-error: ${{ matrix.zmq == 'head' || matrix.python == '3.14' }}

    env:
      MACOSX_DEPLOYMENT_TARGET: "13.7"

    strategy:
      fail-fast: true
      matrix:
        include:
          - os: macos-13
            python: "3.8"

          - os: macos-14
            python: "3.13"
            zmq: bundled

          - os: macos-13
            python: pypy-3.9
            zmq: bundled

          - os: ubuntu-22.04
            python: "3.8"
            zmq: bundled
            tornado: none

          - os: ubuntu-22.04
            python: pypy-3.9
            zmq: bundled

          - os: ubuntu-22.04
            python: pypy-3.8

          - os: ubuntu-22.04
            python: "3.9"

          - os: ubuntu-22.04
            python: "3.10"

          - os: ubuntu-22.04
            python: "3.11"
            zmq: head
            tornado: head

          - os: ubuntu-24.04
            python: "3.12"
            abi: cp312

          - os: ubuntu-24.04
            python: "3.13"
            backend: cffi

          - os: ubuntu-24.04
            python: "3.13"

          - os: ubuntu-24.04
            python: "3.13"
            free_threading: free_threading

          - os: ubuntu-24.04
            python: "3.14"

          - os: ubuntu-24.04
            python: "3.14"
            free_threading: free_threading

          - os: windows-2022
            python: "3.8"
            arch: x86

          - os: windows-2022
            python: "3.11"
            arch: x64

          - os: windows-2022
            python: "3.13"
            arch: x64

    steps:
      - uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.arch || 'x64' }}
          # allows us to use '3.12' and get '-dev' while we wait
          allow-prereleases: true
          freethreaded: ${{ matrix.free_threading == 'free_threading' }}
          check-latest: ${{ matrix.python == '3.14' }}
          cache: pip

      - name: setup free threading
        if: ${{ matrix.free_threading }}
        run: |
          echo "PYTHON_GIL=0" >> "$GITHUB_ENV"
          echo "EXTRA_PIP=--no-binary coverage" >> "$GITHUB_ENV"

      - name: setup coverage
        if: startsWith(matrix.python, 'pypy') || startsWith(matrix.python, '3.14')
        run: |
          grep -v plugins .coveragerc > .coveragerc-save
          mv .coveragerc-save .coveragerc

      # - name: enable Cython coverage
      #   if: "! (startsWith(matrix.python, 'pypy') || startsWith(matrix.python, '3.12'))"
      #   run: |
      #     echo "PYZMQ_CYTHON_COVERAGE=1" >> "$GITHUB_ENV"

      - name: install dependencies
        run: |
          pip install --upgrade pip wheel
          pip install ${EXTRA_PIP:-} -r test-requirements.txt

      - name: remove tornado
        if: matrix.tornado == 'none'
        run: |
          pip uninstall -y tornado

      - name: install tornado-head
        if: matrix.tornado == 'head'
        run: |
          pip install https://github.com/tornadoweb/tornado/archive/HEAD.zip

      - name: install pinned tornado
        if: matrix.tornado && matrix.tornado != 'none' && matrix.tornado != 'head'
        run: |
          pip install tornado=="${{ matrix.tornado }}"

      - name: show environment
        run: |
          pip freeze

      - name: install mac dependencies
        if: startsWith(matrix.os, 'mac') && matrix.zmq != 'bundled'
        run: |
          brew install libsodium zeromq

      - name: install linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get -y remove libzmq5 || true # workaround https://github.com/actions/virtual-environments/issues/3317
          sudo apt-get -y install libzmq3-dev libsodium-dev

      - name: set $ZMQ_PREFIX
        if: matrix.zmq
        run: |
          echo "ZMQ_PREFIX=${{ matrix.zmq }}" >> "$GITHUB_ENV"

      - name: set $PYZMQ_BACKEND
        if: matrix.backend
        run: |
          echo "PYZMQ_BACKEND=${{ matrix.backend }}" >> "$GITHUB_ENV"
          pip install cffi

      - name: set stable ABI
        if: matrix.abi
        run: |
          echo "PIP_CONFIG_SETTINGS=wheel.py-api=${{ matrix.abi }}" >> "$GITHUB_ENV"

      - name: install libzmq-dev
        if: matrix.zmq == 'head'
        run: |
          wget https://github.com/zeromq/libzmq/archive/HEAD.zip -O libzmq.zip
          unzip libzmq.zip
          pushd libzmq-*
          ./autogen.sh
          ./configure --enable-drafts
          make -j4
          sudo make install
          sudo ldconfig
          popd
          echo "ZMQ_PREFIX=/usr/local" >> "$GITHUB_ENV"
          echo ZMQ_DRAFT_API=1 >> "$GITHUB_ENV"

      - name: build pyzmq
        run: |
          pip install -v -e .

      - name: import zmq
        run: |
          python -I -c "import zmq"

      - name: run tests
        run: |
          pytest --maxfail 2 --cov zmq -m "not wheel and not new_console" -v

      - name: upload coverage
        run: codecov

      # FIXME: what's the right incantation to call this?
      # the same line from appveyor doesn't work here
      # - name: run extra windows tests
      #   if: startsWith(matrix.os, 'win')
      #   run: |
      #     cmd /c start /wait test pytest -vsx -m new_console --pyargs zmq.tests --junit-xml=./results.xml
      #     python tools/check_junit_result.py ./results.xml
